{"version":3,"sources":["../../../../src/modules/oauth/discord/discord.service.ts"],"sourcesContent":["import { HttpException, HttpStatus, Inject, Injectable } from \"@nestjs/common\";\n\nimport {\n  AccountsService,\n  AuthService,\n  SessionsService,\n  UsersService,\n} from \"@/modules\";\nimport { DiscordProfile } from \"./discord.types\";\nimport { cuid } from \"@/utils/functions\";\n@Injectable()\nexport class DiscordService {\n  constructor(\n    @Inject(AccountsService)\n    private readonly accountsService: AccountsService,\n    @Inject(AuthService)\n    private readonly authService: AuthService,\n    @Inject(UsersService)\n    private readonly usersService: UsersService,\n  ) {}\n\n  async createProfile(profile: DiscordProfile) {\n    const { exists, id: existingUserId } = await this.usersService.userExists({\n      query: \"email\",\n      value: profile.email,\n    });\n\n    if (exists) {\n      const existingAccount = await this.accountsService.getAccount({\n        query: \"userId\",\n        value: existingUserId,\n      });\n\n      if (existingAccount.provider !== \"discord\")\n        throw new HttpException(\n          \"Email is already associated with another account\",\n          HttpStatus.CONFLICT,\n        );\n\n      const session = await this.authService.login(existingUserId);\n\n      return { account: null, auth: session, user: null };\n    }\n\n    const user = await this.usersService.createUser({\n      id: cuid(),\n      username: profile.username,\n      email: profile.email,\n    });\n\n    const session = await this.authService.login(user.id);\n\n    const account = await this.accountsService.createAccount({\n      id: cuid(),\n      userId: user.id,\n      provider: profile.provider,\n      providerId: profile.providerId,\n    });\n\n    return { account, auth: session, user };\n  }\n}\n"],"names":["DiscordService","createProfile","profile","exists","id","existingUserId","usersService","userExists","query","value","email","existingAccount","accountsService","getAccount","provider","HttpException","HttpStatus","CONFLICT","session","authService","login","account","auth","user","createUser","cuid","username","createAccount","userId","providerId","constructor","Injectable","Inject","AccountsService","AuthService","UsersService"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXiD;yBAOvD;2BAEc;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAERA,iBAAN;IAUL,MAAMC,cAAcC,OAAuB,EAAE;QAC3C,MAAM,EAAEC,MAAM,EAAEC,IAAIC,cAAc,EAAE,GAAG,MAAM,IAAI,CAACC,YAAY,CAACC,UAAU,CAAC;YACxEC,OAAO;YACPC,OAAOP,QAAQQ,KAAK;QACtB;QAEA,IAAIP,QAAQ;YACV,MAAMQ,kBAAkB,MAAM,IAAI,CAACC,eAAe,CAACC,UAAU,CAAC;gBAC5DL,OAAO;gBACPC,OAAOJ;YACT;YAEA,IAAIM,gBAAgBG,QAAQ,KAAK,WAC/B,MAAM,IAAIC,qBAAa,CACrB,oDACAC,kBAAU,CAACC,QAAQ;YAGvB,MAAMC,UAAU,MAAM,IAAI,CAACC,WAAW,CAACC,KAAK,CAACf;YAE7C,OAAO;gBAAEgB,SAAS;gBAAMC,MAAMJ;gBAASK,MAAM;YAAK;QACpD;QAEA,MAAMA,OAAO,MAAM,IAAI,CAACjB,YAAY,CAACkB,UAAU,CAAC;YAC9CpB,IAAIqB,IAAAA,eAAI;YACRC,UAAUxB,QAAQwB,QAAQ;YAC1BhB,OAAOR,QAAQQ,KAAK;QACtB;QAEA,MAAMQ,UAAU,MAAM,IAAI,CAACC,WAAW,CAACC,KAAK,CAACG,KAAKnB,EAAE;QAEpD,MAAMiB,UAAU,MAAM,IAAI,CAACT,eAAe,CAACe,aAAa,CAAC;YACvDvB,IAAIqB,IAAAA,eAAI;YACRG,QAAQL,KAAKnB,EAAE;YACfU,UAAUZ,QAAQY,QAAQ;YAC1Be,YAAY3B,QAAQ2B,UAAU;QAChC;QAEA,OAAO;YAAER;YAASC,MAAMJ;YAASK;QAAK;IACxC;IAhDAO,YAEmBlB,iBAEAO,aAEAb,aACjB;+BALiBM;+BAEAO;+BAEAb;+BAJAM;2BAEAO;4BAEAb;IAChB;AA0CL;AAlDaN;IADZ+B,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,cAAM,EAACC,wBAAe;IAEtBD,aAAAA,IAAAA,cAAM,EAACE,oBAAW;IAElBF,aAAAA,IAAAA,cAAM,EAACG,qBAAY;;;eAHc,wBAAe,4BAAf,wBAAe;eAEnB,oBAAW,4BAAX,oBAAW;eAEV,qBAAY,4BAAZ,qBAAY;;GAPlCnC"}