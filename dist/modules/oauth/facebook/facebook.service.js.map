{"version":3,"sources":["../../../../src/modules/oauth/facebook/facebook.service.ts"],"sourcesContent":["import {\n  AccountsService,\n  GeneratorService,\n  SessionsService,\n  UsersService,\n} from \"@/modules\";\nimport { AuthService } from \"@/modules/auth\";\nimport { Inject, Injectable } from \"@nestjs/common\";\nimport type { FacebookUser } from \"./facebook.types\";\nimport { cuid } from \"@/utils/functions\";\n\n@Injectable()\nexport class FacebookService {\n  constructor(\n    @Inject(AccountsService)\n    private readonly accountsService: AccountsService,\n    @Inject(AuthService)\n    private readonly authService: AuthService,\n    @Inject(GeneratorService)\n    private readonly generatorService: GeneratorService,\n    @Inject(UsersService)\n    private readonly usersService: UsersService,\n  ) {}\n\n  async createProfile(profile: FacebookUser) {\n    const { exists, id: existingUserId } =\n      await this.accountsService.accountExists({\n        query: \"providerId\",\n        value: profile.providerId,\n      });\n\n    if (exists) {\n      const { at, rt, session } = await this.authService.login(existingUserId);\n\n      return { user: null, account: null, auth: { at, rt, session } };\n    }\n\n    const userId = cuid();\n    const accountId = cuid();\n    const username = await this.generatorService.generateUsername();\n\n    const { name, picture, providerId, provider } = profile;\n\n    const user = {\n      id: userId,\n      username,\n      name,\n    };\n\n    const newUser = await this.usersService.createUser(user);\n\n    const session = await this.authService.login(newUser.id);\n\n    const account = await this.accountsService.createAccount({\n      id: accountId,\n      provider,\n      providerId,\n      userId,\n    });\n\n    return { account, auth: session, user: newUser };\n  }\n}\n"],"names":["FacebookService","createProfile","profile","exists","id","existingUserId","accountsService","accountExists","query","value","providerId","at","rt","session","authService","login","user","account","auth","userId","cuid","accountId","username","generatorService","generateUsername","name","picture","provider","newUser","usersService","createUser","createAccount","constructor","Injectable","Inject","AccountsService","AuthService","GeneratorService","UsersService"],"mappings":";;;;+BAYaA;;;eAAAA;;;yBAPN;sBACqB;wBACO;2BAEd;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGRA,kBAAN;IAYL,MAAMC,cAAcC,OAAqB,EAAE;QACzC,MAAM,EAAEC,MAAM,EAAEC,IAAIC,cAAc,EAAE,GAClC,MAAM,IAAI,CAACC,eAAe,CAACC,aAAa,CAAC;YACvCC,OAAO;YACPC,OAAOP,QAAQQ,UAAU;QAC3B;QAEF,IAAIP,QAAQ;YACV,MAAM,EAAEQ,EAAE,EAAEC,EAAE,EAAEC,OAAO,EAAE,GAAG,MAAM,IAAI,CAACC,WAAW,CAACC,KAAK,CAACV;YAEzD,OAAO;gBAAEW,MAAM;gBAAMC,SAAS;gBAAMC,MAAM;oBAAEP;oBAAIC;oBAAIC;gBAAQ;YAAE;QAChE;QAEA,MAAMM,SAASC,IAAAA,eAAI;QACnB,MAAMC,YAAYD,IAAAA,eAAI;QACtB,MAAME,WAAW,MAAM,IAAI,CAACC,gBAAgB,CAACC,gBAAgB;QAE7D,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEhB,UAAU,EAAEiB,QAAQ,EAAE,GAAGzB;QAEhD,MAAMc,OAAO;YACXZ,IAAIe;YACJG;YACAG;QACF;QAEA,MAAMG,UAAU,MAAM,IAAI,CAACC,YAAY,CAACC,UAAU,CAACd;QAEnD,MAAMH,UAAU,MAAM,IAAI,CAACC,WAAW,CAACC,KAAK,CAACa,QAAQxB,EAAE;QAEvD,MAAMa,UAAU,MAAM,IAAI,CAACX,eAAe,CAACyB,aAAa,CAAC;YACvD3B,IAAIiB;YACJM;YACAjB;YACAS;QACF;QAEA,OAAO;YAAEF;YAASC,MAAML;YAASG,MAAMY;QAAQ;IACjD;IAhDAI,YAEmB1B,iBAEAQ,aAEAS,kBAEAM,aACjB;+BAPiBvB;+BAEAQ;+BAEAS;+BAEAM;+BANAvB;2BAEAQ;gCAEAS;4BAEAM;IAChB;AAwCL;AAlDa7B;IADZiC,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,cAAM,EAACC,wBAAe;IAEtBD,aAAAA,IAAAA,cAAM,EAACE,iBAAW;IAElBF,aAAAA,IAAAA,cAAM,EAACG,yBAAgB;IAEvBH,aAAAA,IAAAA,cAAM,EAACI,qBAAY;;;eALc,wBAAe,4BAAf,wBAAe;eAEnB,iBAAW,4BAAX,iBAAW;eAEN,yBAAgB,4BAAhB,yBAAgB;eAEpB,qBAAY,4BAAZ,qBAAY;;GATlCtC"}