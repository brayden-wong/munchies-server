{"version":3,"sources":["../../../src/modules/drizzle/drizzle.module.ts"],"sourcesContent":["import { Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Client } from \"pg\";\n\nimport * as schema from \"./schemas\";\nimport {\n  getDrizzleConfigToken,\n  getDrizzleInstanceToken,\n} from \"./drizzle.constants\";\nimport { Database, DrizzleConfig } from \"./drizzle.types\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { DrizzleService } from \"./drizzle.service\";\n\n@Global()\n@Module({\n  imports: [ScheduleModule.forRoot()],\n  providers: [\n    DrizzleService,\n    {\n      provide: getDrizzleConfigToken(),\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => {\n        const getDatabaseConfig = async (): Promise<DrizzleConfig> => {\n          return {\n            host: config.get<string>(\"PG_HOST\"),\n            database: config.get<string>(\"PG_DATABASE\"),\n            port: config.get<number>(\"PG_PORT\"),\n            user: config.get<string>(\"PG_USER\"),\n            password: config.get<string>(\"PG_PASSWORD\"),\n          };\n        };\n\n        return await getDatabaseConfig();\n      },\n    },\n    {\n      provide: getDrizzleInstanceToken(),\n      inject: [getDrizzleConfigToken()],\n      useFactory: async ({\n        database,\n        host,\n        password,\n        user,\n        ...config\n      }: DrizzleConfig): Promise<Database> => {\n        const connectionString = `postgres://${user}:${password}@${host}${\n          process.env.NODE_ENV === \"docker\" ? `:${config.port}` : \"\"\n        }/${database}`;\n\n        const client = new Client({\n          connectionString,\n          ssl:\n            process.env.NODE_ENV === \"production\"\n              ? true\n              : process.env.NODE_ENV === \"development\"\n              ? true\n              : false,\n        });\n\n        await client.connect();\n\n        const db = drizzle(client, { logger: true, schema });\n\n        return db;\n      },\n    },\n  ],\n  exports: [getDrizzleInstanceToken()],\n})\nexport class DrizzleModule {}\n"],"names":["DrizzleModule","Global","Module","imports","ScheduleModule","forRoot","providers","DrizzleService","provide","getDrizzleConfigToken","inject","ConfigService","useFactory","config","getDatabaseConfig","host","get","database","port","user","password","getDrizzleInstanceToken","connectionString","process","env","NODE_ENV","client","Client","ssl","connect","db","drizzle","logger","schema","exports"],"mappings":";;;;+BAsEaA;;;eAAAA;;;wBAtEkB;wBACa;8BACpB;oBACD;iEAEC;kCAIjB;0BAEwB;gCACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0DlBA,gBAAN;AAAqB;AAAfA;IAxDZC,IAAAA,cAAM;IACNC,IAAAA,cAAM,EAAC;QACNC,SAAS;YAACC,wBAAc,CAACC,OAAO;SAAG;QACnCC,WAAW;YACTC,8BAAc;YACd;gBACEC,SAASC,IAAAA,uCAAqB;gBAC9BC,QAAQ;oBAACC,qBAAa;iBAAC;gBACvBC,YAAY,OAAOC;oBACjB,MAAMC,oBAAoB;wBACxB,OAAO;4BACLC,MAAMF,OAAOG,GAAG,CAAS;4BACzBC,UAAUJ,OAAOG,GAAG,CAAS;4BAC7BE,MAAML,OAAOG,GAAG,CAAS;4BACzBG,MAAMN,OAAOG,GAAG,CAAS;4BACzBI,UAAUP,OAAOG,GAAG,CAAS;wBAC/B;oBACF;oBAEA,OAAO,MAAMF;gBACf;YACF;YACA;gBACEN,SAASa,IAAAA,yCAAuB;gBAChCX,QAAQ;oBAACD,IAAAA,uCAAqB;iBAAG;gBACjCG,YAAY,OAAO,EACjBK,QAAQ,EACRF,IAAI,EACJK,QAAQ,EACRD,IAAI,EACJ,GAAGN,QACW;oBACd,MAAMS,mBAAmB,CAAC,WAAW,EAAEH,KAAK,CAAC,EAAEC,SAAS,CAAC,EAAEL,KAAK,EAC9DQ,QAAQC,GAAG,CAACC,QAAQ,KAAK,WAAW,CAAC,CAAC,EAAEZ,OAAOK,IAAI,CAAC,CAAC,GAAG,GACzD,CAAC,EAAED,SAAS,CAAC;oBAEd,MAAMS,SAAS,IAAIC,UAAM,CAAC;wBACxBL;wBACAM,KACEL,QAAQC,GAAG,CAACC,QAAQ,KAAK,eACrB,OACAF,QAAQC,GAAG,CAACC,QAAQ,KAAK,gBACzB,OACA;oBACR;oBAEA,MAAMC,OAAOG,OAAO;oBAEpB,MAAMC,KAAKC,IAAAA,qBAAO,EAACL,QAAQ;wBAAEM,QAAQ;wBAAMC,QAAAA;oBAAO;oBAElD,OAAOH;gBACT;YACF;SACD;QACDI,SAAS;YAACb,IAAAA,yCAAuB;SAAG;IACtC;GACarB"}