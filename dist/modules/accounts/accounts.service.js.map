{"version":3,"sources":["../../../src/modules/accounts/accounts.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { Database, InjectDrizzle, accounts, users } from \"@/modules/drizzle\";\nimport type { AccountExistsParams, CreateAccountDto } from \"./accounts.types\";\nimport { eq } from \"drizzle-orm\";\n\n@Injectable()\nexport class AccountsService {\n  constructor(\n    @InjectDrizzle()\n    private readonly db: Database,\n  ) {}\n\n  async createAccount(createAccountDto: CreateAccountDto) {\n    const [account] = await this.db\n      .insert(accounts)\n      .values(createAccountDto)\n      .returning();\n\n    return account;\n  }\n\n  async getAccount({ query, value }: AccountExistsParams) {\n    const queryResult = await this.parseQuery({ query, value });\n\n    const account = await this.db.query.accounts.findFirst({\n      where: queryResult,\n    });\n\n    return account;\n  }\n\n  async accountExists({ query, value }: AccountExistsParams) {\n    const queryResult = await this.parseQuery({ query, value });\n\n    const result = await this.db.query.accounts.findFirst({\n      where: queryResult,\n      columns: { userId: true },\n    });\n\n    return result\n      ? { exists: true, id: result.userId }\n      : { exists: false, id: null };\n  }\n\n  private async parseQuery({ query, value }: AccountExistsParams) {\n    return query === \"providerId\"\n      ? eq(accounts.providerId, value)\n      : eq(accounts.userId, value);\n  }\n}\n"],"names":["AccountsService","createAccount","createAccountDto","account","db","insert","accounts","values","returning","getAccount","query","value","queryResult","parseQuery","findFirst","where","accountExists","result","columns","userId","exists","id","eq","providerId","constructor","Injectable","InjectDrizzle"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBANc;yBAC8B;4BAEtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGNA,kBAAN;IAML,MAAMC,cAAcC,gBAAkC,EAAE;QACtD,MAAM,CAACC,QAAQ,GAAG,MAAM,IAAI,CAACC,EAAE,CAC5BC,MAAM,CAACC,iBAAQ,EACfC,MAAM,CAACL,kBACPM,SAAS;QAEZ,OAAOL;IACT;IAEA,MAAMM,WAAW,EAAEC,KAAK,EAAEC,KAAK,EAAuB,EAAE;QACtD,MAAMC,cAAc,MAAM,IAAI,CAACC,UAAU,CAAC;YAAEH;YAAOC;QAAM;QAEzD,MAAMR,UAAU,MAAM,IAAI,CAACC,EAAE,CAACM,KAAK,CAACJ,QAAQ,CAACQ,SAAS,CAAC;YACrDC,OAAOH;QACT;QAEA,OAAOT;IACT;IAEA,MAAMa,cAAc,EAAEN,KAAK,EAAEC,KAAK,EAAuB,EAAE;QACzD,MAAMC,cAAc,MAAM,IAAI,CAACC,UAAU,CAAC;YAAEH;YAAOC;QAAM;QAEzD,MAAMM,SAAS,MAAM,IAAI,CAACb,EAAE,CAACM,KAAK,CAACJ,QAAQ,CAACQ,SAAS,CAAC;YACpDC,OAAOH;YACPM,SAAS;gBAAEC,QAAQ;YAAK;QAC1B;QAEA,OAAOF,SACH;YAAEG,QAAQ;YAAMC,IAAIJ,OAAOE,MAAM;QAAC,IAClC;YAAEC,QAAQ;YAAOC,IAAI;QAAK;IAChC;IAEA,MAAcR,WAAW,EAAEH,KAAK,EAAEC,KAAK,EAAuB,EAAE;QAC9D,OAAOD,UAAU,eACbY,IAAAA,cAAE,EAAChB,iBAAQ,CAACiB,UAAU,EAAEZ,SACxBW,IAAAA,cAAE,EAAChB,iBAAQ,CAACa,MAAM,EAAER;IAC1B;IAzCAa,YAEmBpB,GACjB;+BADiBA;kBAAAA;IAChB;AAuCL;AA3CaJ;IADZyB,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,sBAAa;;;eACO,iBAAQ,4BAAR,iBAAQ;;GAHpB1B"}