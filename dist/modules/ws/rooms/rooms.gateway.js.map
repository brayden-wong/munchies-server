{"version":3,"sources":["../../../../src/modules/ws/rooms/rooms.gateway.ts"],"sourcesContent":["import {\n  ConnectedSocket,\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from \"@nestjs/websockets\";\nimport { UseGuards } from \"@nestjs/common\";\nimport type { Server, Socket } from \"socket.io\";\n\nimport { SUBSCRIPTIONS } from \"./rooms.constants\";\nimport { RoomsService } from \"./rooms.service\";\nimport { CurrentUserId } from \"../decorators\";\nimport { WsGuard } from \"../ws.guard\";\n\n@WebSocketGateway()\nexport class RoomsGateway {\n  @WebSocketServer()\n  server: Server;\n\n  constructor(private readonly roomsService: RoomsService) {}\n\n  @UseGuards(WsGuard)\n  @SubscribeMessage(SUBSCRIPTIONS[\"create room\"])\n  async createRoom(\n    @ConnectedSocket()\n    socket: Socket,\n    @CurrentUserId()\n    currentUserId: string,\n    @MessageBody()\n    data: { userIds: Array<string> },\n  ) {\n    const room = await this.roomsService.createRoom({\n      creatorId: currentUserId,\n      users: data.userIds,\n    });\n\n    socket.join(room.id);\n    socket.emit(currentUserId, {\n      status: \"ok\",\n      statusCode: 201,\n      data: room,\n    });\n  }\n\n  @UseGuards(WsGuard)\n  @SubscribeMessage(SUBSCRIPTIONS[\"join rooms\"])\n  async joinRooms(\n    @ConnectedSocket()\n    socket: Socket,\n    @CurrentUserId()\n    currentUserId: string,\n  ) {\n    const rooms = await this.roomsService.joinAllAssociatedRooms(currentUserId);\n    for (const room of rooms) {\n      await socket.join(room.id);\n    }\n\n    socket.emit(currentUserId, {\n      status: \"ok\",\n      statusCode: 200,\n      data: rooms,\n    });\n  }\n}\n"],"names":["RoomsGateway","createRoom","socket","currentUserId","data","room","roomsService","creatorId","users","userIds","join","id","emit","status","statusCode","joinRooms","rooms","joinAllAssociatedRooms","constructor","server","WebSocketServer","UseGuards","WsGuard","SubscribeMessage","SUBSCRIPTIONS","ConnectedSocket","CurrentUserId","MessageBody","WebSocketGateway"],"mappings":";;;;+BAgBaA;;;eAAAA;;;4BAVN;wBACmB;gCAGI;8BACD;4BACC;yBACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGXA,eAAN;IAML,MAEMC,WACJ,AACAC,MAAc,EACd,AACAC,aAAqB,EACrB,AACAC,IAAgC,EAChC;QACA,MAAMC,OAAO,MAAM,IAAI,CAACC,YAAY,CAACL,UAAU,CAAC;YAC9CM,WAAWJ;YACXK,OAAOJ,KAAKK,OAAO;QACrB;QAEAP,OAAOQ,IAAI,CAACL,KAAKM,EAAE;QACnBT,OAAOU,IAAI,CAACT,eAAe;YACzBU,QAAQ;YACRC,YAAY;YACZV,MAAMC;QACR;IACF;IAEA,MAEMU,UACJ,AACAb,MAAc,EACd,AACAC,aAAqB,EACrB;QACA,MAAMa,QAAQ,MAAM,IAAI,CAACV,YAAY,CAACW,sBAAsB,CAACd;QAC7D,KAAK,MAAME,QAAQW,MAAO;YACxB,MAAMd,OAAOQ,IAAI,CAACL,KAAKM,EAAE;QAC3B;QAEAT,OAAOU,IAAI,CAACT,eAAe;YACzBU,QAAQ;YACRC,YAAY;YACZV,MAAMY;QACR;IACF;IA3CAE,YAA6BZ,aAA4B;+BAA5BA;QAH7B,uBACAa,UADA,KAAA;4BAG6Bb;IAA6B;AA4C5D;;IA/CGc,IAAAA,2BAAe;uCACR,kCAAA;GAFGpB;;IAMVqB,IAAAA,iBAAS,EAACC,gBAAO;IACjBC,IAAAA,4BAAgB,EAACC,6BAAa,CAAC,cAAc;IAE3CC,aAAAA,IAAAA,2BAAe;IAEfC,aAAAA,IAAAA,yBAAa;IAEbC,aAAAA,IAAAA,uBAAW;;;eAHJ,kCAAA;;;;GAVC3B;;IA6BVqB,IAAAA,iBAAS,EAACC,gBAAO;IACjBC,IAAAA,4BAAgB,EAACC,6BAAa,CAAC,aAAa;IAE1CC,aAAAA,IAAAA,2BAAe;IAEfC,aAAAA,IAAAA,yBAAa;;;eADN,kCAAA;;;GAjCC1B;AAAAA;IADZ4B,IAAAA,4BAAgB;;;eAK4B,0BAAY,4BAAZ,0BAAY;;GAJ5C5B"}