{"version":3,"sources":["../../../src/modules/sessions/sessions.service.ts"],"sourcesContent":["import { HttpException, HttpStatus, Inject, Injectable } from \"@nestjs/common\";\nimport { Database, InjectDrizzle, sessions } from \"../drizzle\";\nimport type {\n  CreateSessionParams,\n  UpdateSessionParams,\n} from \"./sessions.types\";\nimport { eq } from \"drizzle-orm\";\nimport { cuid } from \"@/utils\";\nimport { HashService } from \"../utils\";\n\n@Injectable()\nexport class SessionsService {\n  constructor(\n    @Inject(HashService) private readonly hashService: HashService,\n    @InjectDrizzle() private readonly db: Database,\n  ) {}\n\n  async createSession(createSessionDto: CreateSessionParams) {\n    const expiration = await this.generateExpiration();\n    const { userId, refreshToken: rt } = createSessionDto;\n\n    const id = cuid();\n\n    const refreshToken = await this.hashService.hash(rt);\n    const [session] = await this.db\n      .insert(sessions)\n      .values({ expiration, id, refreshToken, userId })\n      .returning();\n\n    return session;\n  }\n\n  async validateSession(userId: string) {\n    const session = await this.db.query.sessions.findFirst({\n      where: eq(sessions.userId, userId),\n    });\n\n    if (session && session.expiration < new Date()) return false;\n\n    return session ? true : false;\n  }\n\n  async updateSession(userId: string, updateSessionDto: UpdateSessionParams) {\n    try {\n      const expiration = await this.generateExpiration();\n\n      if (updateSessionDto.type === \"login\") {\n        const session = await this.db.transaction(async (tx) => {\n          const result = await tx.query.sessions.findFirst({\n            where: eq(sessions.userId, userId),\n          });\n\n          if (!result) throw new Error(\"Session does not exist\");\n\n          const refreshToken = await this.hashService.hash(\n            updateSessionDto.refreshToken,\n          );\n\n          const [session] = await tx\n            .update(sessions)\n            .set({\n              expiration,\n              refreshToken,\n            })\n            .where(eq(sessions.userId, userId))\n            .returning();\n\n          return session;\n        });\n\n        return session;\n      }\n\n      const session = await this.db.transaction(async (tx) => {\n        const result = await tx.query.sessions.findFirst({\n          where: eq(sessions.userId, userId),\n        });\n\n        if (!result) throw new Error(\"Session not found\");\n\n        if (\n          !(await this.hashService.compare(\n            updateSessionDto.oldRefreshToken,\n            result.refreshToken,\n          ))\n        )\n          throw new Error(\"Not authorized\");\n\n        const refreshToken = await this.hashService.hash(\n          updateSessionDto.newRefreshToken,\n        );\n\n        const [session] = await tx\n          .update(sessions)\n          .set({ expiration, refreshToken })\n          .where(eq(sessions.userId, userId))\n          .returning();\n\n        return session;\n      });\n\n      return session;\n    } catch (error) {\n      if (error instanceof Error)\n        throw new HttpException(error.message, HttpStatus.UNAUTHORIZED);\n    }\n  }\n\n  private async generateExpiration() {\n    return new Date(Date.now() + 1000 * 60 * 60 * 24 * 30);\n  }\n}\n"],"names":["SessionsService","createSession","createSessionDto","expiration","generateExpiration","userId","refreshToken","rt","id","cuid","hashService","hash","session","db","insert","sessions","values","returning","validateSession","query","findFirst","where","eq","Date","updateSession","updateSessionDto","type","transaction","tx","result","Error","update","set","compare","oldRefreshToken","newRefreshToken","error","HttpException","message","HttpStatus","UNAUTHORIZED","now","constructor","Injectable","Inject","HashService","InjectDrizzle"],"mappings":"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"}