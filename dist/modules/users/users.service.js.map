{"version":3,"sources":["../../../src/modules/users/users.service.ts"],"sourcesContent":["import { HttpException, HttpStatus, Inject, Injectable } from \"@nestjs/common\";\n\nimport { InjectDrizzle, accounts, sessions, users } from \"@/modules/drizzle\";\nimport { CreateUserDto, FindOneParams, UpdateUserDto } from \"./users.types\";\n\nimport type { Database } from \"@/modules/drizzle\";\nimport { HashService } from \"../utils\";\nimport { and, asc, eq, isNull, like } from \"drizzle-orm\";\nimport { cuid } from \"@/utils\";\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectDrizzle() private readonly db: Database,\n    @Inject(HashService) private readonly hashService: HashService,\n  ) {}\n\n  async createUser(createUserDto: CreateUserDto) {\n    try {\n      const user = await this.db.transaction(async (tx) => {\n        if (createUserDto.email)\n          createUserDto.email = createUserDto.email.toLowerCase();\n\n        const [existingUser] = await tx\n          .select()\n          .from(users)\n          .where(\n            createUserDto.email\n              ? eq(users.email, createUserDto.email.toLowerCase())\n              : eq(users.username, createUserDto.username),\n          )\n          .limit(1)\n          .execute();\n\n        if (existingUser) {\n          throw new Error(\"User already exists\");\n        }\n\n        const id = cuid();\n        if (createUserDto.password)\n          createUserDto.password = await this.hashService.hash(\n            createUserDto.password,\n          );\n\n        const [result] = await tx\n          .insert(users)\n          .values({\n            id,\n            ...createUserDto,\n          })\n          .returning();\n\n        return result;\n      });\n\n      return user;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new HttpException(error.message, HttpStatus.CONFLICT);\n      }\n    }\n  }\n\n  async getUser({ query, value }: FindOneParams) {\n    const queryResult = await this.parseQuery({ query, value });\n\n    const [result] = await this.db\n      .select()\n      .from(users)\n      .where(queryResult)\n      .orderBy(asc(users.username))\n      .execute();\n\n    return result;\n  }\n\n  async getUsers() {\n    return await this.db\n      .select()\n      .from(users)\n      .orderBy(asc(users.username))\n      .execute();\n  }\n\n  async updateUser(id: string, updateUserDto: UpdateUserDto) {\n    try {\n      const user = await this.db.transaction(async (tx) => {\n        const result = await tx.query.users.findFirst({\n          where: eq(users.id, id),\n          columns: { id: true },\n        });\n\n        if (!result) throw new Error(\"User not found\");\n\n        if (updateUserDto.password)\n          updateUserDto.password = await this.hashService.hash(\n            updateUserDto.password,\n          );\n\n        if (updateUserDto.email)\n          updateUserDto.email = updateUserDto.email.toLowerCase();\n\n        const [updatedUser] = await tx\n          .update(users)\n          .set({\n            ...updateUserDto,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.id, id))\n          .returning();\n\n        return updatedUser;\n      });\n\n      return user;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n    }\n  }\n\n  async activateUser(id: string) {\n    try {\n      const user = await this.db.transaction(async (tx) => {\n        const result = await tx.query.users.findFirst({\n          where: eq(users.id, id),\n          columns: { id: true },\n        });\n\n        if (!result) throw new Error(\"User not found\");\n\n        const [activatedUser] = await tx\n          .update(users)\n          .set({ updatedAt: new Date(), deactivate: false })\n          .where(eq(users.id, id))\n          .returning();\n\n        return activatedUser;\n      });\n\n      return user;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n    }\n  }\n\n  async deactivateUser(id: string) {\n    try {\n      const user = await this.db.transaction(async (tx) => {\n        const result = await tx.query.users.findFirst({\n          where: eq(users.id, id),\n          columns: { id: true },\n        });\n\n        if (!result) throw new Error(\"User not found\");\n\n        const [deactivatedUser] = await tx\n          .update(users)\n          .set({ updatedAt: new Date(), deactivate: true })\n          .where(eq(users.id, id))\n          .returning();\n\n        return deactivatedUser;\n      });\n\n      return user;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n    }\n  }\n\n  async deleteUser(id: string) {\n    try {\n      const user = await this.db.transaction(async (tx) => {\n        const [result] = await this.db\n          .select({\n            id: users.id,\n            accountId: accounts.id,\n            sessionId: sessions.id,\n          })\n          .from(users)\n          .leftJoin(sessions, eq(users.id, sessions.userId))\n          .rightJoin(accounts, eq(users.id, accounts.userId))\n          .where(eq(users.id, id))\n          .limit(1)\n          .execute();\n\n        if (!result) throw new Error(\"User not found\");\n\n        const { accountId, sessionId } = result;\n        if (accountId) await this.deleteAccount(accountId);\n        if (sessionId) await this.deleteSession(sessionId);\n\n        const [deletedUser] = await tx\n          .delete(users)\n          .where(eq(users.id, id))\n          .returning();\n\n        return deletedUser;\n      });\n\n      return user;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n    }\n  }\n\n  async userExists({ query, value }: FindOneParams) {\n    const queryResult = await this.parseQuery({ query, value });\n\n    const result = await this.db.query.users.findFirst({\n      columns: { id: true },\n      where: queryResult,\n    });\n\n    return result\n      ? { exists: true, id: result.id }\n      : { exists: false, id: null };\n  }\n\n  private async deleteAccount(accountId: string) {\n    await this.db.delete(accounts).where(eq(accounts.id, accountId)).execute();\n  }\n\n  private async deleteSession(sessionId: string) {\n    await this.db.delete(sessions).where(eq(sessions.id, sessionId)).execute();\n  }\n\n  private async parseQuery({ query, value }: FindOneParams) {\n    const result =\n      query === \"email\"\n        ? and(eq(users.email, value), isNull(users.deletedAt))\n        : query === \"username\"\n        ? and(eq(users.username, value), isNull(users.deletedAt))\n        : and(eq(users.id, value), isNull(users.deletedAt));\n\n    return result;\n  }\n}\n"],"names":["UsersService","createUser","createUserDto","user","db","transaction","tx","email","toLowerCase","existingUser","select","from","users","where","eq","username","limit","execute","Error","id","cuid","password","hashService","hash","result","insert","values","returning","error","HttpException","message","HttpStatus","CONFLICT","getUser","query","value","queryResult","parseQuery","orderBy","asc","getUsers","updateUser","updateUserDto","findFirst","columns","updatedUser","update","set","updatedAt","Date","NOT_FOUND","activateUser","activatedUser","deactivate","deactivateUser","deactivatedUser","deleteUser","accountId","accounts","sessionId","sessions","leftJoin","userId","rightJoin","deleteAccount","deleteSession","deletedUser","delete","userExists","exists","and","isNull","deletedAt","constructor","Injectable","InjectDrizzle","Inject","HashService"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXiD;yBAEL;uBAI7B;4BACe;wBACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGRA,eAAN;IAML,MAAMC,WAAWC,aAA4B,EAAE;QAC7C,IAAI;YACF,MAAMC,OAAO,MAAM,IAAI,CAACC,EAAE,CAACC,WAAW,CAAC,OAAOC;gBAC5C,IAAIJ,cAAcK,KAAK,EACrBL,cAAcK,KAAK,GAAGL,cAAcK,KAAK,CAACC,WAAW;gBAEvD,MAAM,CAACC,aAAa,GAAG,MAAMH,GAC1BI,MAAM,GACNC,IAAI,CAACC,cAAK,EACVC,KAAK,CACJX,cAAcK,KAAK,GACfO,IAAAA,cAAE,EAACF,cAAK,CAACL,KAAK,EAAEL,cAAcK,KAAK,CAACC,WAAW,MAC/CM,IAAAA,cAAE,EAACF,cAAK,CAACG,QAAQ,EAAEb,cAAca,QAAQ,GAE9CC,KAAK,CAAC,GACNC,OAAO;gBAEV,IAAIR,cAAc;oBAChB,MAAM,IAAIS,MAAM;gBAClB;gBAEA,MAAMC,KAAKC,IAAAA,YAAI;gBACf,IAAIlB,cAAcmB,QAAQ,EACxBnB,cAAcmB,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,CAACC,IAAI,CAClDrB,cAAcmB,QAAQ;gBAG1B,MAAM,CAACG,OAAO,GAAG,MAAMlB,GACpBmB,MAAM,CAACb,cAAK,EACZc,MAAM,CAAC;oBACNP;oBACA,GAAGjB,aAAa;gBAClB,GACCyB,SAAS;gBAEZ,OAAOH;YACT;YAEA,OAAOrB;QACT,EAAE,OAAOyB,OAAO;YACd,IAAIA,iBAAiBV,OAAO;gBAC1B,MAAM,IAAIW,qBAAa,CAACD,MAAME,OAAO,EAAEC,kBAAU,CAACC,QAAQ;YAC5D;QACF;IACF;IAEA,MAAMC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAiB,EAAE;QAC7C,MAAMC,cAAc,MAAM,IAAI,CAACC,UAAU,CAAC;YAAEH;YAAOC;QAAM;QAEzD,MAAM,CAACX,OAAO,GAAG,MAAM,IAAI,CAACpB,EAAE,CAC3BM,MAAM,GACNC,IAAI,CAACC,cAAK,EACVC,KAAK,CAACuB,aACNE,OAAO,CAACC,IAAAA,eAAG,EAAC3B,cAAK,CAACG,QAAQ,GAC1BE,OAAO;QAEV,OAAOO;IACT;IAEA,MAAMgB,WAAW;QACf,OAAO,MAAM,IAAI,CAACpC,EAAE,CACjBM,MAAM,GACNC,IAAI,CAACC,cAAK,EACV0B,OAAO,CAACC,IAAAA,eAAG,EAAC3B,cAAK,CAACG,QAAQ,GAC1BE,OAAO;IACZ;IAEA,MAAMwB,WAAWtB,EAAU,EAAEuB,aAA4B,EAAE;QACzD,IAAI;YACF,MAAMvC,OAAO,MAAM,IAAI,CAACC,EAAE,CAACC,WAAW,CAAC,OAAOC;gBAC5C,MAAMkB,SAAS,MAAMlB,GAAG4B,KAAK,CAACtB,KAAK,CAAC+B,SAAS,CAAC;oBAC5C9B,OAAOC,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEA;oBACpByB,SAAS;wBAAEzB,IAAI;oBAAK;gBACtB;gBAEA,IAAI,CAACK,QAAQ,MAAM,IAAIN,MAAM;gBAE7B,IAAIwB,cAAcrB,QAAQ,EACxBqB,cAAcrB,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,CAACC,IAAI,CAClDmB,cAAcrB,QAAQ;gBAG1B,IAAIqB,cAAcnC,KAAK,EACrBmC,cAAcnC,KAAK,GAAGmC,cAAcnC,KAAK,CAACC,WAAW;gBAEvD,MAAM,CAACqC,YAAY,GAAG,MAAMvC,GACzBwC,MAAM,CAAClC,cAAK,EACZmC,GAAG,CAAC;oBACH,GAAGL,aAAa;oBAChBM,WAAW,IAAIC;gBACjB,GACCpC,KAAK,CAACC,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEA,KACnBQ,SAAS;gBAEZ,OAAOkB;YACT;YAEA,OAAO1C;QACT,EAAE,OAAOyB,OAAO;YACd,IAAIA,iBAAiBV,OAAO;gBAC1B,MAAM,IAAIW,qBAAa,CAACD,MAAME,OAAO,EAAEC,kBAAU,CAACmB,SAAS;YAC7D;QACF;IACF;IAEA,MAAMC,aAAahC,EAAU,EAAE;QAC7B,IAAI;YACF,MAAMhB,OAAO,MAAM,IAAI,CAACC,EAAE,CAACC,WAAW,CAAC,OAAOC;gBAC5C,MAAMkB,SAAS,MAAMlB,GAAG4B,KAAK,CAACtB,KAAK,CAAC+B,SAAS,CAAC;oBAC5C9B,OAAOC,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEA;oBACpByB,SAAS;wBAAEzB,IAAI;oBAAK;gBACtB;gBAEA,IAAI,CAACK,QAAQ,MAAM,IAAIN,MAAM;gBAE7B,MAAM,CAACkC,cAAc,GAAG,MAAM9C,GAC3BwC,MAAM,CAAClC,cAAK,EACZmC,GAAG,CAAC;oBAAEC,WAAW,IAAIC;oBAAQI,YAAY;gBAAM,GAC/CxC,KAAK,CAACC,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEA,KACnBQ,SAAS;gBAEZ,OAAOyB;YACT;YAEA,OAAOjD;QACT,EAAE,OAAOyB,OAAO;YACd,IAAIA,iBAAiBV,OAAO;gBAC1B,MAAM,IAAIW,qBAAa,CAACD,MAAME,OAAO,EAAEC,kBAAU,CAACmB,SAAS;YAC7D;QACF;IACF;IAEA,MAAMI,eAAenC,EAAU,EAAE;QAC/B,IAAI;YACF,MAAMhB,OAAO,MAAM,IAAI,CAACC,EAAE,CAACC,WAAW,CAAC,OAAOC;gBAC5C,MAAMkB,SAAS,MAAMlB,GAAG4B,KAAK,CAACtB,KAAK,CAAC+B,SAAS,CAAC;oBAC5C9B,OAAOC,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEA;oBACpByB,SAAS;wBAAEzB,IAAI;oBAAK;gBACtB;gBAEA,IAAI,CAACK,QAAQ,MAAM,IAAIN,MAAM;gBAE7B,MAAM,CAACqC,gBAAgB,GAAG,MAAMjD,GAC7BwC,MAAM,CAAClC,cAAK,EACZmC,GAAG,CAAC;oBAAEC,WAAW,IAAIC;oBAAQI,YAAY;gBAAK,GAC9CxC,KAAK,CAACC,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEA,KACnBQ,SAAS;gBAEZ,OAAO4B;YACT;YAEA,OAAOpD;QACT,EAAE,OAAOyB,OAAO;YACd,IAAIA,iBAAiBV,OAAO;gBAC1B,MAAM,IAAIW,qBAAa,CAACD,MAAME,OAAO,EAAEC,kBAAU,CAACmB,SAAS;YAC7D;QACF;IACF;IAEA,MAAMM,WAAWrC,EAAU,EAAE;QAC3B,IAAI;YACF,MAAMhB,OAAO,MAAM,IAAI,CAACC,EAAE,CAACC,WAAW,CAAC,OAAOC;gBAC5C,MAAM,CAACkB,OAAO,GAAG,MAAM,IAAI,CAACpB,EAAE,CAC3BM,MAAM,CAAC;oBACNS,IAAIP,cAAK,CAACO,EAAE;oBACZsC,WAAWC,iBAAQ,CAACvC,EAAE;oBACtBwC,WAAWC,iBAAQ,CAACzC,EAAE;gBACxB,GACCR,IAAI,CAACC,cAAK,EACViD,QAAQ,CAACD,iBAAQ,EAAE9C,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEyC,iBAAQ,CAACE,MAAM,GAC/CC,SAAS,CAACL,iBAAQ,EAAE5C,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEuC,iBAAQ,CAACI,MAAM,GAChDjD,KAAK,CAACC,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEA,KACnBH,KAAK,CAAC,GACNC,OAAO;gBAEV,IAAI,CAACO,QAAQ,MAAM,IAAIN,MAAM;gBAE7B,MAAM,EAAEuC,SAAS,EAAEE,SAAS,EAAE,GAAGnC;gBACjC,IAAIiC,WAAW,MAAM,IAAI,CAACO,aAAa,CAACP;gBACxC,IAAIE,WAAW,MAAM,IAAI,CAACM,aAAa,CAACN;gBAExC,MAAM,CAACO,YAAY,GAAG,MAAM5D,GACzB6D,MAAM,CAACvD,cAAK,EACZC,KAAK,CAACC,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEA,KACnBQ,SAAS;gBAEZ,OAAOuC;YACT;YAEA,OAAO/D;QACT,EAAE,OAAOyB,OAAO;YACd,IAAIA,iBAAiBV,OAAO;gBAC1B,MAAM,IAAIW,qBAAa,CAACD,MAAME,OAAO,EAAEC,kBAAU,CAACmB,SAAS;YAC7D;QACF;IACF;IAEA,MAAMkB,WAAW,EAAElC,KAAK,EAAEC,KAAK,EAAiB,EAAE;QAChD,MAAMC,cAAc,MAAM,IAAI,CAACC,UAAU,CAAC;YAAEH;YAAOC;QAAM;QAEzD,MAAMX,SAAS,MAAM,IAAI,CAACpB,EAAE,CAAC8B,KAAK,CAACtB,KAAK,CAAC+B,SAAS,CAAC;YACjDC,SAAS;gBAAEzB,IAAI;YAAK;YACpBN,OAAOuB;QACT;QAEA,OAAOZ,SACH;YAAE6C,QAAQ;YAAMlD,IAAIK,OAAOL,EAAE;QAAC,IAC9B;YAAEkD,QAAQ;YAAOlD,IAAI;QAAK;IAChC;IAEA,MAAc6C,cAAcP,SAAiB,EAAE;QAC7C,MAAM,IAAI,CAACrD,EAAE,CAAC+D,MAAM,CAACT,iBAAQ,EAAE7C,KAAK,CAACC,IAAAA,cAAE,EAAC4C,iBAAQ,CAACvC,EAAE,EAAEsC,YAAYxC,OAAO;IAC1E;IAEA,MAAcgD,cAAcN,SAAiB,EAAE;QAC7C,MAAM,IAAI,CAACvD,EAAE,CAAC+D,MAAM,CAACP,iBAAQ,EAAE/C,KAAK,CAACC,IAAAA,cAAE,EAAC8C,iBAAQ,CAACzC,EAAE,EAAEwC,YAAY1C,OAAO;IAC1E;IAEA,MAAcoB,WAAW,EAAEH,KAAK,EAAEC,KAAK,EAAiB,EAAE;QACxD,MAAMX,SACJU,UAAU,UACNoC,IAAAA,eAAG,EAACxD,IAAAA,cAAE,EAACF,cAAK,CAACL,KAAK,EAAE4B,QAAQoC,IAAAA,kBAAM,EAAC3D,cAAK,CAAC4D,SAAS,KAClDtC,UAAU,aACVoC,IAAAA,eAAG,EAACxD,IAAAA,cAAE,EAACF,cAAK,CAACG,QAAQ,EAAEoB,QAAQoC,IAAAA,kBAAM,EAAC3D,cAAK,CAAC4D,SAAS,KACrDF,IAAAA,eAAG,EAACxD,IAAAA,cAAE,EAACF,cAAK,CAACO,EAAE,EAAEgB,QAAQoC,IAAAA,kBAAM,EAAC3D,cAAK,CAAC4D,SAAS;QAErD,OAAOhD;IACT;IAxOAiD,YACoCrE,IACIkB,YACtC;+BAFkClB;+BACIkB;kBADJlB;2BACIkB;IACrC;AAsOL;AA1OatB;IADZ0E,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,sBAAa;IACbC,aAAAA,IAAAA,cAAM,EAACC,kBAAW;;;eADmB,oCAAA;eACa,kBAAW,4BAAX,kBAAW;;GAHrD7E"}