{"version":3,"sources":["../../../src/modules/auth/auth.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Get,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Patch,\n  Post,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { UsersService, type CreateUserDto } from \"@/modules/users\";\nimport { ROUTES } from \"@/utils/constants\";\nimport { AuthService } from \"./services\";\nimport { LocalGuard, RtGuard } from \"./guards\";\nimport { Public, CurrentUser, UserId } from \"@/utils/decorators\";\nimport { RefreshToken } from \"@/utils\";\n\n@Controller(ROUTES.AUTH)\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    @Inject(UsersService) private readonly usersService: UsersService,\n  ) {}\n\n  @Public()\n  @Post(\"register\")\n  async register(@Body() createUserDto: CreateUserDto) {\n    const user = await this.usersService.createUser(createUserDto);\n\n    if (!user) {\n      throw new HttpException(\n        {\n          status: \"error\",\n          statusCode: HttpStatus.BAD_REQUEST,\n          message: \"Could not create user\",\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    return {\n      status: \"ok\",\n      statusCode: HttpStatus.CREATED,\n      data: {\n        user,\n      },\n    };\n  }\n\n  @Public()\n  @Post(\"login\")\n  @UseGuards(LocalGuard)\n  async login(@UserId() userId: string) {\n    const { at, rt, session } = await this.authService.login(userId);\n\n    return {\n      status: \"ok\",\n      statusCode: HttpStatus.OK,\n      data: {\n        at,\n        rt,\n        session,\n      },\n    };\n  }\n\n  @Public()\n  @Patch(\"refresh\")\n  @UseGuards(RtGuard)\n  async refreshToken(@CurrentUser() user: RefreshToken) {\n    const { at, rt, session } = await this.authService.refreshToken(\n      user.rt,\n      user.id,\n    );\n\n    return {\n      status: \"ok\",\n      statusCode: HttpStatus.OK,\n      data: {\n        at,\n        rt,\n        session,\n      },\n    };\n  }\n}\n"],"names":["AuthController","register","createUserDto","user","usersService","createUser","HttpException","status","statusCode","HttpStatus","BAD_REQUEST","message","CREATED","data","login","userId","at","rt","session","authService","OK","refreshToken","id","constructor","Public","Post","Body","UseGuards","LocalGuard","UserId","Patch","RtGuard","CurrentUser","Controller","ROUTES","AUTH","Inject","UsersService"],"mappings":";;;;+BAmBaA;;;eAAAA;;;wBATN;uBAC0C;2BAC1B;0BACK;wBACQ;4BACQ;uBACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGhBA,iBAAN;IAML,MAEMC,SAAS,AAAQC,aAA4B,EAAE;QACnD,MAAMC,OAAO,MAAM,IAAI,CAACC,YAAY,CAACC,UAAU,CAACH;QAEhD,IAAI,CAACC,MAAM;YACT,MAAM,IAAIG,qBAAa,CACrB;gBACEC,QAAQ;gBACRC,YAAYC,kBAAU,CAACC,WAAW;gBAClCC,SAAS;YACX,GACAF,kBAAU,CAACC,WAAW;QAE1B;QAEA,OAAO;YACLH,QAAQ;YACRC,YAAYC,kBAAU,CAACG,OAAO;YAC9BC,MAAM;gBACJV;YACF;QACF;IACF;IAEA,MAGMW,MAAM,AAAUC,MAAc,EAAE;QACpC,MAAM,EAAEC,EAAE,EAAEC,EAAE,EAAEC,OAAO,EAAE,GAAG,MAAM,IAAI,CAACC,WAAW,CAACL,KAAK,CAACC;QAEzD,OAAO;YACLR,QAAQ;YACRC,YAAYC,kBAAU,CAACW,EAAE;YACzBP,MAAM;gBACJG;gBACAC;gBACAC;YACF;QACF;IACF;IAEA,MAGMG,aAAa,AAAelB,IAAkB,EAAE;QACpD,MAAM,EAAEa,EAAE,EAAEC,EAAE,EAAEC,OAAO,EAAE,GAAG,MAAM,IAAI,CAACC,WAAW,CAACE,YAAY,CAC7DlB,KAAKc,EAAE,EACPd,KAAKmB,EAAE;QAGT,OAAO;YACLf,QAAQ;YACRC,YAAYC,kBAAU,CAACW,EAAE;YACzBP,MAAM;gBACJG;gBACAC;gBACAC;YACF;QACF;IACF;IAjEAK,YACmBJ,aACsBf,aACvC;+BAFiBe;+BACsBf;2BADtBe;4BACsBf;IACtC;AA+DL;;IA7DGoB,IAAAA,kBAAM;IACNC,IAAAA,YAAI,EAAC;IACUC,aAAAA,IAAAA,YAAI;;;eAAkB,yCAAA;;GAR3B1B;;IA+BVwB,IAAAA,kBAAM;IACNC,IAAAA,YAAI,EAAC;IACLE,IAAAA,iBAAS,EAACC,kBAAU;IACRC,aAAAA,IAAAA,kBAAM;;;;;GAlCR7B;;IAgDVwB,IAAAA,kBAAM;IACNM,IAAAA,aAAK,EAAC;IACNH,IAAAA,iBAAS,EAACI,eAAO;IACEC,aAAAA,IAAAA,uBAAW;;;eAAS,mBAAY,4BAAZ,mBAAY;;GAnDzChC;AAAAA;IADZiC,IAAAA,kBAAU,EAACC,iBAAM,CAACC,IAAI;IAIlBC,aAAAA,IAAAA,cAAM,EAACC,mBAAY;;;eADU,qBAAW,4BAAX,qBAAW;eACY,mBAAY,4BAAZ,mBAAY;;GAHxDrC"}