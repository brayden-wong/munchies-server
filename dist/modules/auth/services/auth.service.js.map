{"version":3,"sources":["../../../../src/modules/auth/services/auth.service.ts"],"sourcesContent":["import { HttpException, HttpStatus, Inject, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { JwtService } from \"@nestjs/jwt\";\n\nimport { SessionsService } from \"@/modules/sessions\";\nimport { UsersService } from \"@/modules/users\";\nimport { HashService } from \"@/modules/utils\";\nimport { isValidEmail } from \"@/utils/functions\";\nimport type { Token } from \"@/utils/types\";\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(ConfigService) private readonly config: ConfigService,\n    @Inject(HashService) private readonly hashService: HashService,\n    @Inject(JwtService) private readonly jwtService: JwtService,\n    @Inject(SessionsService) private readonly sessionsService: SessionsService,\n    @Inject(UsersService) private readonly usersService: UsersService,\n  ) {}\n\n  async validateUser(username: string, pass: string) {\n    const isValid = isValidEmail(username);\n\n    const user = isValid\n      ? await this.usersService.getUser({ query: \"email\", value: username })\n      : await this.usersService.getUser({ query: \"username\", value: username });\n\n    if (!user) return null;\n\n    if (!(await this.hashService.compare(pass, user.password))) return null;\n\n    return { id: user.id };\n  }\n\n  async login(userId: string) {\n    const isValidSession = await this.sessionsService.validateSession(userId);\n\n    const { at, rt } = await this.generateTokens(userId);\n\n    const session = isValidSession\n      ? await this.sessionsService.updateSession(userId, {\n          type: \"login\",\n          userId,\n          refreshToken: rt,\n        })\n      : await this.sessionsService.createSession({\n          userId,\n          refreshToken: rt,\n        });\n\n    if (!session)\n      throw new HttpException(\n        \"Failed to create session\",\n        HttpStatus.BAD_REQUEST,\n      );\n\n    return { at, rt, session };\n  }\n\n  async validateToken(\n    token: string,\n    options: { type: \"at\" | \"rt\" } = { type: \"at\" },\n  ) {\n    const decoded: Token = await this.jwtService.verifyAsync(token, {\n      secret:\n        options.type === \"at\"\n          ? this.config.get<string>(\"AT_SECRET\")\n          : this.config.get<string>(\"RT_SECRET\"),\n    });\n\n    const user = await this.usersService.getUser({\n      query: \"id\",\n      value: decoded.id,\n    });\n\n    if (!user) return null;\n\n    return decoded;\n  }\n\n  async refreshToken(refreshToken: string, userId: string) {\n    const { at, rt } = await this.generateTokens(userId);\n\n    const session = await this.sessionsService.updateSession(userId, {\n      type: \"refresh\",\n      newRefreshToken: rt,\n      oldRefreshToken: refreshToken,\n      userId,\n    });\n\n    if (!session) throw new HttpException(\"Invalid refresh token\", 401);\n\n    return { at, rt, session };\n  }\n\n  private async generateTokens(id: string) {\n    const [at, rt] = await Promise.all([\n      this.jwtService.signAsync(\n        { id },\n        {\n          expiresIn: this.config.get<string>(\"AT_EXP\"),\n          secret: this.config.get<string>(\"AT_SECRET\"),\n        },\n      ),\n      this.jwtService.signAsync(\n        { id },\n        {\n          expiresIn: this.config.get<string>(\"RT_EXP\"),\n          secret: this.config.get<string>(\"RT_SECRET\"),\n        },\n      ),\n    ]);\n\n    return { at, rt } as const;\n  }\n}\n"],"names":["AuthService","validateUser","username","pass","isValid","isValidEmail","user","usersService","getUser","query","value","hashService","compare","password","id","login","userId","isValidSession","sessionsService","validateSession","at","rt","generateTokens","session","updateSession","type","refreshToken","createSession","HttpException","HttpStatus","BAD_REQUEST","validateToken","token","options","decoded","jwtService","verifyAsync","secret","config","get","newRefreshToken","oldRefreshToken","Promise","all","signAsync","expiresIn","constructor","Injectable","Inject","ConfigService","HashService","JwtService","SessionsService","UsersService"],"mappings":"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"}